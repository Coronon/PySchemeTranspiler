Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> arguments
Rule 1     arguments -> statement COMMA statement
Rule 2     statement -> NAME EQUALS expression
Rule 3     statement -> expression
Rule 4     expression -> expression PLUS expression
Rule 5     expression -> expression MINUS expression
Rule 6     expression -> expression TIMES expression
Rule 7     expression -> expression DIVIDE expression
Rule 8     expression -> MINUS expression
Rule 9     expression -> LPAREN expression RPAREN
Rule 10    expression -> NUMBER
Rule 11    expression -> NAME

Terminals, with rules where they appear

COMMA                : 1
DIVIDE               : 7
EQUALS               : 2
LPAREN               : 9
MINUS                : 5 8
NAME                 : 2 11
NUMBER               : 10
PLUS                 : 4
RPAREN               : 9
TIMES                : 6
error                : 

Nonterminals, with rules where they appear

arguments            : 0
expression           : 2 3 4 4 5 5 6 6 7 7 8 9
statement            : 1 1

Parsing method: LALR

state 0

    (0) S' -> . arguments
    (1) arguments -> . statement COMMA statement
    (2) statement -> . NAME EQUALS expression
    (3) statement -> . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    NAME            shift and go to state 3
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7

    arguments                      shift and go to state 1
    statement                      shift and go to state 2
    expression                     shift and go to state 4

state 1

    (0) S' -> arguments .



state 2

    (1) arguments -> statement . COMMA statement

    COMMA           shift and go to state 8


state 3

    (2) statement -> NAME . EQUALS expression
    (11) expression -> NAME .

    EQUALS          shift and go to state 9
    PLUS            reduce using rule 11 (expression -> NAME .)
    MINUS           reduce using rule 11 (expression -> NAME .)
    TIMES           reduce using rule 11 (expression -> NAME .)
    DIVIDE          reduce using rule 11 (expression -> NAME .)
    COMMA           reduce using rule 11 (expression -> NAME .)
    $end            reduce using rule 11 (expression -> NAME .)


state 4

    (3) statement -> expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    COMMA           reduce using rule 3 (statement -> expression .)
    $end            reduce using rule 3 (statement -> expression .)
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 5

    (8) expression -> MINUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 14

state 6

    (9) expression -> LPAREN . expression RPAREN
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 16

state 7

    (10) expression -> NUMBER .

    PLUS            reduce using rule 10 (expression -> NUMBER .)
    MINUS           reduce using rule 10 (expression -> NUMBER .)
    TIMES           reduce using rule 10 (expression -> NUMBER .)
    DIVIDE          reduce using rule 10 (expression -> NUMBER .)
    COMMA           reduce using rule 10 (expression -> NUMBER .)
    RPAREN          reduce using rule 10 (expression -> NUMBER .)
    $end            reduce using rule 10 (expression -> NUMBER .)


state 8

    (1) arguments -> statement COMMA . statement
    (2) statement -> . NAME EQUALS expression
    (3) statement -> . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    NAME            shift and go to state 3
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7

    statement                      shift and go to state 17
    expression                     shift and go to state 4

state 9

    (2) statement -> NAME EQUALS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 18

state 10

    (4) expression -> expression PLUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 19

state 11

    (5) expression -> expression MINUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 20

state 12

    (6) expression -> expression TIMES . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 21

state 13

    (7) expression -> expression DIVIDE . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 15

    expression                     shift and go to state 22

state 14

    (8) expression -> MINUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 8 (expression -> MINUS expression .)
    MINUS           reduce using rule 8 (expression -> MINUS expression .)
    TIMES           reduce using rule 8 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 8 (expression -> MINUS expression .)
    COMMA           reduce using rule 8 (expression -> MINUS expression .)
    RPAREN          reduce using rule 8 (expression -> MINUS expression .)
    $end            reduce using rule 8 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 13 ]


state 15

    (11) expression -> NAME .

    PLUS            reduce using rule 11 (expression -> NAME .)
    MINUS           reduce using rule 11 (expression -> NAME .)
    TIMES           reduce using rule 11 (expression -> NAME .)
    DIVIDE          reduce using rule 11 (expression -> NAME .)
    COMMA           reduce using rule 11 (expression -> NAME .)
    RPAREN          reduce using rule 11 (expression -> NAME .)
    $end            reduce using rule 11 (expression -> NAME .)


state 16

    (9) expression -> LPAREN expression . RPAREN
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 23
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 17

    (1) arguments -> statement COMMA statement .

    $end            reduce using rule 1 (arguments -> statement COMMA statement .)


state 18

    (2) statement -> NAME EQUALS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    COMMA           reduce using rule 2 (statement -> NAME EQUALS expression .)
    $end            reduce using rule 2 (statement -> NAME EQUALS expression .)
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 19

    (4) expression -> expression PLUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 4 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 4 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 4 (expression -> expression PLUS expression .)
    $end            reduce using rule 4 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13

  ! TIMES           [ reduce using rule 4 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]


state 20

    (5) expression -> expression MINUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 5 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 5 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 5 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 5 (expression -> expression MINUS expression .)
    $end            reduce using rule 5 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13

  ! TIMES           [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]


state 21

    (6) expression -> expression TIMES expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 6 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 6 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 6 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 6 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 6 (expression -> expression TIMES expression .)
    $end            reduce using rule 6 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 13 ]


state 22

    (7) expression -> expression DIVIDE expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 7 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 7 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 7 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 7 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 7 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 7 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 7 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 13 ]


state 23

    (9) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 9 (expression -> LPAREN expression RPAREN .)

