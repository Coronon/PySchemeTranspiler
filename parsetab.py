
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSCOMMA DIVIDE EQUALS LPAREN MINUS NAME NUMBER PLUS RPAREN TIMES\n    arguments : statement COMMA statement\n    statement : NAME EQUALS expressionstatement : expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'NAME':([0,5,6,8,9,10,11,12,13,],[3,15,15,3,15,15,15,15,15,]),'MINUS':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,],[5,-11,11,5,5,-10,5,5,5,5,5,5,-8,-11,11,11,-4,-5,-6,-7,-9,]),'LPAREN':([0,5,6,8,9,10,11,12,13,],[6,6,6,6,6,6,6,6,6,]),'NUMBER':([0,5,6,8,9,10,11,12,13,],[7,7,7,7,7,7,7,7,7,]),'$end':([1,3,4,7,14,15,17,18,19,20,21,22,23,],[0,-11,-3,-10,-8,-11,-1,-2,-4,-5,-6,-7,-9,]),'COMMA':([2,3,4,7,14,15,18,19,20,21,22,23,],[8,-11,-3,-10,-8,-11,-2,-4,-5,-6,-7,-9,]),'EQUALS':([3,],[9,]),'PLUS':([3,4,7,14,15,16,18,19,20,21,22,23,],[-11,10,-10,-8,-11,10,10,-4,-5,-6,-7,-9,]),'TIMES':([3,4,7,14,15,16,18,19,20,21,22,23,],[-11,12,-10,-8,-11,12,12,12,12,-6,-7,-9,]),'DIVIDE':([3,4,7,14,15,16,18,19,20,21,22,23,],[-11,13,-10,-8,-11,13,13,13,13,-6,-7,-9,]),'RPAREN':([7,14,15,16,19,20,21,22,23,],[-10,-8,-11,23,-4,-5,-6,-7,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'arguments':([0,],[1,]),'statement':([0,8,],[2,17,]),'expression':([0,5,6,8,9,10,11,12,13,],[4,14,16,4,18,19,20,21,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> arguments","S'",1,None,None,None),
  ('arguments -> statement COMMA statement','arguments',3,'p_funccall_arguments','calc.py',62),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','calc.py',68),
  ('statement -> expression','statement',1,'p_statement_expr','calc.py',72),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','calc.py',77),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','calc.py',78),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','calc.py',79),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','calc.py',80),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','calc.py',87),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calc.py',91),
  ('expression -> NUMBER','expression',1,'p_expression_number','calc.py',95),
  ('expression -> NAME','expression',1,'p_expression_name','calc.py',99),
]
